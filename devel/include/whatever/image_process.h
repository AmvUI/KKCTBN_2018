// Generated by gencpp from file whatever/image_process.msg
// DO NOT EDIT!


#ifndef WHATEVER_MESSAGE_IMAGE_PROCESS_H
#define WHATEVER_MESSAGE_IMAGE_PROCESS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace whatever
{
template <class ContainerAllocator>
struct image_process_
{
  typedef image_process_<ContainerAllocator> Type;

  image_process_()
    : state_red(0)
    , state_green(0)
    , count_red(0)
    , count_green(0)  {
    }
  image_process_(const ContainerAllocator& _alloc)
    : state_red(0)
    , state_green(0)
    , count_red(0)
    , count_green(0)  {
  (void)_alloc;
    }



   typedef int16_t _state_red_type;
  _state_red_type state_red;

   typedef int16_t _state_green_type;
  _state_green_type state_green;

   typedef int16_t _count_red_type;
  _count_red_type count_red;

   typedef int16_t _count_green_type;
  _count_green_type count_green;





  typedef boost::shared_ptr< ::whatever::image_process_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::whatever::image_process_<ContainerAllocator> const> ConstPtr;

}; // struct image_process_

typedef ::whatever::image_process_<std::allocator<void> > image_process;

typedef boost::shared_ptr< ::whatever::image_process > image_processPtr;
typedef boost::shared_ptr< ::whatever::image_process const> image_processConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::whatever::image_process_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::whatever::image_process_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace whatever

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geographic_msgs': ['/opt/ros/kinetic/share/geographic_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'mavros_msgs': ['/opt/ros/kinetic/share/mavros_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'whatever': ['/home/mfikih15/Documents/AMV/src/whatever/msg'], 'uuid_msgs': ['/opt/ros/kinetic/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::whatever::image_process_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whatever::image_process_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whatever::image_process_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whatever::image_process_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whatever::image_process_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whatever::image_process_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::whatever::image_process_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5e1c278fbb5698de32e1d5d47db51b4";
  }

  static const char* value(const ::whatever::image_process_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5e1c278fbb5698dULL;
  static const uint64_t static_value2 = 0xe32e1d5d47db51b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::whatever::image_process_<ContainerAllocator> >
{
  static const char* value()
  {
    return "whatever/image_process";
  }

  static const char* value(const ::whatever::image_process_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::whatever::image_process_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 state_red\n\
int16 state_green\n\
int16 count_red\n\
int16 count_green\n\
";
  }

  static const char* value(const ::whatever::image_process_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::whatever::image_process_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state_red);
      stream.next(m.state_green);
      stream.next(m.count_red);
      stream.next(m.count_green);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct image_process_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::whatever::image_process_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::whatever::image_process_<ContainerAllocator>& v)
  {
    s << indent << "state_red: ";
    Printer<int16_t>::stream(s, indent + "  ", v.state_red);
    s << indent << "state_green: ";
    Printer<int16_t>::stream(s, indent + "  ", v.state_green);
    s << indent << "count_red: ";
    Printer<int16_t>::stream(s, indent + "  ", v.count_red);
    s << indent << "count_green: ";
    Printer<int16_t>::stream(s, indent + "  ", v.count_green);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHATEVER_MESSAGE_IMAGE_PROCESS_H
